// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL")
}

// Enums for role and subscription status
enum UserRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

// Main tables
model Organization {
  id          String    @id @default(uuid())
  clerkId     String    @unique
  name        String
  slug        String    @unique
  features    Json      @default("{}")
  usages       Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  memberships       Membership[]

  @@map("organizations")
}

model User {
  id            String    @id @default(uuid())
  clerkId       String    @unique
  stripeId      String?   @unique
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  memberships     Membership[]

  @@map("users")
}

model Membership {
  id        String    @id @default(uuid())
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("memberships")
}
